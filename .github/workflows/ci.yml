name: CI/CD Pipeline

on:
  push:
    branches: [ main, staging, develop ]
  pull_request:
    branches: [ main, staging ]
  workflow_dispatch:

jobs:
  quality_check:
    name: "Quality Gates"
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run quality checks
      run: |
        echo "‚ÑπÔ∏è  Running quality checks (bootstrap template - tools not required)"
        npm run quality:check
        echo "‚úÖ Quality checks completed (configure linter/formatter/tests for full validation)"
    
    - name: Test orchestrator
      run: npm run speckit:plan -- "CI test task"
    
    - name: Test agents (stub mode)
      run: |
        cp .agent-keys.example.json .agent-keys.json
        npm run agent:qwen -- implement --task "CI test" || true
        npm run agent:claude -- review --files "test.js" || true
        npm run agent:gemini -- infra setup --type "test" || true
    
    - name: Run smoke tests
      run: |
        chmod +x scripts/smoke-test.sh
        bash scripts/smoke-test.sh

  validate-config:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Validate YAML configs
      run: |
        npm install -g js-yaml
        js-yaml .speckit/constitutional-rules.yaml > /dev/null
        js-yaml .speckit/profile.yaml > /dev/null
        echo "‚úÖ All YAML files are valid"
    
    - name: Check for secrets in code
      run: |
        if grep -r "api_key.*=.*['\"]sk-" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚ùå Hardcoded API key detected!"
          exit 1
        fi
        echo "‚úÖ No hardcoded secrets found"
    
    - name: Validate package.json
      run: |
        node -e "require('./package.json')"
        echo "‚úÖ package.json is valid"

  docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check documentation
      run: |
        FILES="README.md QUICKSTART.md LICENSE SPEC.md SECURITY.md DEPLOYMENT_GUIDE.md"
        for file in $FILES; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Missing: $file"
            exit 1
          fi
        done
        echo "‚úÖ All required documentation files present"
    
    - name: Check for broken links (TODO)
      run: echo "üìù Link checker not implemented yet"
  
  # Staging deployment (customize for your hosting provider)
  deploy_staging:
    name: "Deploy to Staging"
    needs: [quality_check, validate-config]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: npm run build || echo "No build step configured"
    
    - name: Deploy
      run: echo "üöÄ Configure your deployment here (Vercel, Cloud Run, AWS, etc.)"
    
    # Example: Vercel deployment
    # - name: Deploy to Vercel
    #   uses: amondnet/vercel-action@v20
    #   with:
    #     vercel-token: ${{ secrets.VERCEL_TOKEN }}
    #     vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
    #     vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
    #     vercel-args: '--prod'
  
  # Production deployment (requires manual approval)
  deploy_production:
    name: "Deploy to Production"
    needs: [quality_check, validate-config]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: npm run build || echo "No build step configured"
    
    - name: Deploy
      run: echo "üöÄ Configure your production deployment here"
    
    # Example: Cloud Run deployment
    # - name: Authenticate to Google Cloud
    #   uses: google-github-actions/auth@v2
    #   with:
    #     workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
    #     service_account: ${{ secrets.SERVICE_ACCOUNT }}
    #
    # - name: Deploy to Cloud Run
    #   run: |
    #     gcloud run deploy SERVICE_NAME \
    #       --source . \
    #       --region REGION \
    #       --platform managed

