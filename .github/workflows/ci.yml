name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint || echo "Linter not configured yet"
    
    - name: Run tests
      run: npm test || echo "Tests not implemented yet"
    
    - name: Test orchestrator
      run: npm run speckit:plan -- "CI test task"
    
    - name: Test agents (stub mode)
      run: |
        cp .agent-keys.example.json .agent-keys.json
        npm run agent:qwen -- implement --task "CI test" || true
        npm run agent:claude -- review --files "test.js" || true
        npm run agent:gemini -- infra setup --type "test" || true

  validate-config:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Validate YAML configs
      run: |
        npm install -g js-yaml
        js-yaml .speckit/constitutional-rules.yaml > /dev/null
        js-yaml .speckit/profile.yaml > /dev/null
        echo "‚úÖ All YAML files are valid"
    
    - name: Check for secrets in code
      run: |
        if grep -r "api_key.*=.*['\"]sk-" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚ùå Hardcoded API key detected!"
          exit 1
        fi
        echo "‚úÖ No hardcoded secrets found"
    
    - name: Validate package.json
      run: |
        node -e "require('./package.json')"
        echo "‚úÖ package.json is valid"

  docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check documentation
      run: |
        FILES="README.md QUICKSTART.md LICENSE SPEC.md"
        for file in $FILES; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Missing: $file"
            exit 1
          fi
        done
        echo "‚úÖ All required documentation files present"
    
    - name: Check for broken links (TODO)
      run: echo "üìù Link checker not implemented yet"

